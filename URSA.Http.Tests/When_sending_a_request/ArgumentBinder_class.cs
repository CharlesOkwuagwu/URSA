using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using URSA.Web;
using URSA.Web.Converters;
using URSA.Web.Http;
using URSA.Web.Http.Converters;
using URSA.Web.Http.Mapping;
using URSA.Web.Http.Testing;
using URSA.Web.Http.Tests.Testing;
using URSA.Web.Mapping;
using URSA.Web.Tests;

//// TODO: Finish this test.
namespace Given_instance_of_the.binder.FromBodyArgumentBinder_class
{
    [ExcludeFromCodeCoverage]
    [TestClass]
    public class ArgumentBinder_class
    {
        private const string Boundary = "---------------------------7e02b3393b06a6";
        private static readonly byte[] Request = { 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x37, 0x65, 0x30, 0x32, 0x62, 0x33, 0x33, 0x39, 0x33, 0x62, 0x30, 0x36, 0x61, 0x36, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x44, 0x69, 0x73, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x66, 0x6F, 0x72, 0x6D, 0x2D, 0x64, 0x61, 0x74, 0x61, 0x3B, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x0D, 0x0A, 0x0D, 0x0A, 0x74, 0x65, 0x78, 0x74, 0x0D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x37, 0x65, 0x30, 0x32, 0x62, 0x33, 0x33, 0x39, 0x33, 0x62, 0x30, 0x36, 0x61, 0x36, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x44, 0x69, 0x73, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x3A, 0x20, 0x66, 0x6F, 0x72, 0x6D, 0x2D, 0x64, 0x61, 0x74, 0x61, 0x3B, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x66, 0x69, 0x6C, 0x65, 0x22, 0x3B, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x44, 0x3A, 0x5C, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5C, 0x4B, 0x61, 0x72, 0x6F, 0x6C, 0x20, 0x53, 0x7A, 0x63, 0x7A, 0x65, 0x70, 0x61, 0xC5, 0x84, 0x73, 0x6B, 0x69, 0x5C, 0x44, 0x65, 0x73, 0x6B, 0x74, 0x6F, 0x70, 0x5C, 0x74, 0x65, 0x73, 0x74, 0x2E, 0x62, 0x69, 0x6E, 0x22, 0x0D, 0x0A, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2D, 0x54, 0x79, 0x70, 0x65, 0x3A, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x78, 0x2D, 0x7A, 0x69, 0x70, 0x2D, 0x63, 0x6F, 0x6D, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x0D, 0x0A, 0x0D, 0x0A, 0x50, 0x4B, 0x03, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xAF, 0x39, 0x48, 0xA1, 0xAD, 0x6A, 0xF4, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2E, 0x74, 0x78, 0x74, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x2E, 0x50, 0x4B, 0x01, 0x02, 0x3F, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xAF, 0x39, 0x48, 0xA1, 0xAD, 0x6A, 0xF4, 0x14, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x2E, 0x74, 0x78, 0x74, 0x0A, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x30, 0xFA, 0xFA, 0x0B, 0xB3, 0x57, 0xD1, 0x01, 0xD8, 0x04, 0x9A, 0x05, 0xB3, 0x57, 0xD1, 0x01, 0xD8, 0x04, 0x9A, 0x05, 0xB3, 0x57, 0xD1, 0x01, 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0A, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x37, 0x65, 0x30, 0x32, 0x62, 0x33, 0x33, 0x39, 0x33, 0x62, 0x30, 0x36, 0x61, 0x36, 0x2D, 0x2D, 0x0D, 0x0A };

        private Mock<IRequestInfo> _request;
        private Mock<IRequestMapping> _requestMapping;
        private ArgumentBinder _argumentBinder;

        [TestMethod]
        public void it_should()
        {
            _argumentBinder.BindArguments(_request.Object, _requestMapping.Object);
        }

        [TestInitialize]
        public void Setup()
        {
            var converterProvider = new DefaultConverterProvider();
            converterProvider.Initialize(new IConverter[] { new BinaryConverter(), new StringConverter() });
            _argumentBinder = new ArgumentBinder(new[] { new FromBodyArgumentBinder(converterProvider) });
            _requestMapping = new Mock<IRequestMapping>(MockBehavior.Strict);
            _requestMapping.SetupGet(instance => instance.Target).Returns(new TestController());
            _requestMapping.SetupGet(instance => instance.Operation).Returns(typeof(TestController).GetMethod("Upload").ToOperationInfo("api/", Verb.POST));
            _request.SetupGet(instance => instance.Body).Returns(new MemoryStream(Request));
        }

        [TestCleanup]
        public void Teardown()
        {
            _requestMapping = null;
            _argumentBinder = null;
        }
    }
}